openapi: "3.0.1"

info:
  title: "arg api"
  version: "1"
  description: arg api

servers:
  - url: http://localhost:8080
    description: Local server
  - url: http://62.171.153.17:8080
    description: Dev server
  - url: http://45.90.121.140:8080
    description: Prod server

tags:
  - name: Users
    description: Users api
  - name: HotelBooking
    description: Api to get booking information
  - name: ConferenceReservation
    description: Api to send a reservation request email
  - name: ContactUs
    description: send email to the client for contact
  - name: Event
    description: Api for events
paths:

  /api/v1/users:
    get:
      summary: Get All users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    put:
      summary: Updates a list of users
      operationId: updateUsers
      tags:
        - Users
      requestBody:
        description: Payload to edit the user
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        200:
          description: Updates users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a list of users
      operationId: createUsers
      tags:
        - Users
      requestBody:
        description: Payload to create the user
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateUser"
      responses:
        200:
          description: Updates users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /api/v1/users/{userIds}:
    delete:
      summary: Delete a list of users by id
      operationId: deleteUsersById
      tags:
        - Users
      parameters:
        - name: userIds
          in: path
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
              minimum: 1
            minItems: 1
      responses:
        '200':
          description: Successful deletion
        '400':
          description: Bad Request - Invalid input
        '404':
          description: Not Found - Items not found
  /api/v1/hotel/rooms:
    get:
      summary: Retrieve a list of available rooms for a specified date range
      operationId: retrieveAvailableRoomsForDateRange
      tags:
        - HotelBooking
      parameters:
        - name: pageIndex
          description: Number of the page
          example: 0
          required: true
          in: query
          schema:
            type: integer
            minimum: 0
        - name: page-size
          description: The size of the page
          example: 5
          required: true
          in: query
          schema:
            type: integer
            minimum: 1

        - name: check-in-date
          in: query
          description: Start date of the range for which to retrieve rooms
          example: 2024-07-19
          required: true
          schema:
            type: string
            format: date
        - name: check-out-date
          in: query
          description: End date of the range for which to retrieve rooms
          required: true
          example: 2024-07-20
          schema:
            type: string
            format: date
        - name: number-of-rooms
          in: query
          description: Number of rooms to reserve
          required: true
          example: 1
          schema:
            type: integer
            format: int16
        - name: number-of-adults
          in: query
          description: Number of adults
          required: true
          example: 1
          schema:
            type: integer
            format: int16
        - name: number-of-children
          in: query
          description: Number of children
          required: false
          example: 1
          schema:
            type: integer
            format: int14
        - name: children-ages
          in: query
          description: Age of each child
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: room-types
          in: query
          description: Filter rooms by types (comma-separated values)
          example: [ single, double, suite ]
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
        - name: min-price
          in: query
          description: Minimum price to filter rooms
          example: 100
          schema:
            type: number
            format: float
        - name: max-price
          in: query
          description: Maximum price to filter rooms
          example: 500
          schema:
            type: number
            format: float
        - name: room-facilities
          in: query
          description: Filter rooms by facilities (comma-separated values)
          example: [ wifi, parking, pool ]
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
      responses:
        '200':
          description: A list of rooms available within the specified date range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRoom"
        '400':
          description: Bad request, invalid date format or missing required parameters
        '500':
          description: Internal server error
    post:
      summary: Trigger an update for all rooms (Loads all room from app_in_connect into DB)
      operationId: triggerRoomUpdate
      tags:
        - HotelBooking
      responses:
        '200':
          description: Successful update of rooms
        '400':
          description: Bad request, invalid date format or missing required parameters
        '500':
          description: Internal server error
  /api/v1/hotel/rooms/reservation:
    post:
      summary: Trigger an update of room reservations only (rooms are not updated)
      operationId: triggerRoomReservationUpdate
      tags:
        - HotelBooking
      parameters:
        - name: start-date
          description: Start date of the range for which to update room reservations
          example: 2024-07-19
          required: true
          in: query
          schema:
            type: string
            format: date
        - name: end-date
          in: query
          description: End date of the range for which to update room reservations
          example: 2024-07-20
          required: true
          schema:
            type: string
            format: date
        - name: rooms-id
          description: The id of all rooms to trigger an reservation update
          in: query
          required: false
          example: [ 1,5,625646 ]
          schema:
            type: array
            items:
              type: integer
              format: int64
            default: [ ]
      responses:
        '200':
          description: Successful update of room reservations
        '400':
          description: Bad request, invalid date format or missing required parameters
        '404':
          description: Not found, no reservations found for the given date range or no room present
        '500':
          description: Internal server error

  /api/v1/contact-us/conference-mail-reservation:
    post:
      summary: Send an email to the owner
      operationId: sendConferenceReservationMail
      tags:
        - ConferenceReservation
      requestBody:
        description: Necessary Data to send the email
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConferenceMailStructure"
      responses:
        200:
          description: OK

  /api/v1/contact-us/contact-us-message:
    post:
      summary: Send an email to the owner
      operationId: sendContactUsMail
      tags:
        - ContactUs
      requestBody:
        description: Necessary Data to send the email
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactUsMailStructure"
      responses:
        200:
          description: OK
  /api/v1/events:
    get:
      tags:
        - Event
      summary: Get a page of events
      operationId: getAllUpcomingEvents
      parameters:
        - name: pageIndex
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: pageSize
          in: query
          description: Number of events per page
          required: true
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: eventType
          in: query
          description: Filter events by type (upcoming/recent/all)
          required: true
          schema:
            type: string
            enum: [ upcoming, recent, all ]
            default: all

      responses:
        '200':
          description: List of upcoming events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
    post:
      tags:
        - Event
      summary: Create a new event

      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '201':
          description: Created
        '400':
          description: Bad request

  /api/v1/whatsapp/send:
    post:
      summary: Send a WhatsApp message
      operationId: sendRestaurantReservation
      tags:
        - Whatsapp
      requestBody:
        description: Request payload for sending a WhatsApp message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantReservationRequest'
      responses:
        '200':
          description: Message sent successfully

components:
  schemas:
    User:
      $ref: "./schemas/user.yaml"
    CreateUser:
      $ref: "./schemas/CreateUser.yaml"
    UpdateUserRequest:
      $ref: "./schemas/UpdateUserRequest.yaml"
    Room:
      $ref: "./schemas/hotel/Booking/Room.yaml"
    PaginatedRoom:
      $ref: "./schemas/hotel/Booking/PaginatedRoom.yml"
    ContactUsMailStructure:
      $ref: "./schemas/hotel/Booking/Mail/ContactUsMailStructure.yaml"
    ConferenceMailStructure:
      $ref: "./schemas/hotel/Booking/Mail/ConferenceMailStructure.yaml"
    Page:
      $ref: "./schemas/common/Page.yaml"
    Event:
      $ref: "./schemas/event/event.yaml"
    RestaurantReservationRequest:
      $ref: "./schemas/whatsapp/RestaurantReservationRequest.yaml"
